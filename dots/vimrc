"*****************************************************************************
" NeoBundle core
"*****************************************************************************
if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')

"
" Install Neobundle if donst exists
"
if !filereadable(neobundle_readme)
  echo "Installing NeoBundle..."
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim/
  let g:not_finsh_neobundle = "yes"
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

"*****************************************************************************
" Install plugins if not already installed
"*****************************************************************************
" Editor improvers
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'othree/html5.vim'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'HerringtonDarkholme/yats.vim'
NeoBundle 'tell-k/vim-autopep8'
NeoBundle 'ap/vim-css-color'
NeoBundle 'maksimr/vim-jsbeautify'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'othree/yajs.vim'
NeoBundle 'othree/es.next.syntax.vim'
NeoBundle 'othree/javascript-libraries-syntax.vim'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
NeoBundle 'Quramy/tsuquyomi'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'mileszs/ack.vim'

" Theme
NeoBundle 'rakr/vim-two-firewatch'
NeoBundle 'alessandroyorba/monrovia'
NeoBundle 'arcticicestudio/nord-vim'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"*****************************************************************************
" NeoBundle configuration
"*****************************************************************************
let g:ctrlp_show_hidden = 1 " Show hidden files

"*****************************************************************************
" Personal configuration
"*****************************************************************************

" Peformance
" set nocompatible
set ttyfast
set lazyredraw
set ttyscroll=3

" Syntax highlight
"
syntax on
set synmaxcol=180

" Visual
"
set ruler
set number
set relativenumber 
set cursorline

set tabstop=2
set shiftwidth=2
set expandtab
set autoread


" Color Scheme
"
" Theme Oceanic Next
"set t_Co=256
"set background=dark
"let g:two_firewatch_italics=1
color nord
colorscheme nord

if has('gui_running')
  set guifont=Hack:h11
endif

" Show hidden chars
"
"set list
"set listchars=eol:¬,tab:>~,trail:·,extends:>,precedes:<

" Copy to system clipboard
"
set clipboard=unnamed

" Keep selection after indent
vnoremap < <gv
vnoremap > >gv

" This is how to be a ninja in VIM
" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Disable line wrap
set nowrap


" Map keys to easy move between windows using CTRL+<DIRECTIONS>
"
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"
" Remap :wq to save and delete buffer
:cnoreabbrev wq w<bar>bd
" This will help me not think I already save 
:cnoreabbrev W w

" Lightline
"
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ }
set laststatus=2

" Map arrow keys to move between tabs
"
noremap <Left> :tabprev<CR>
noremap <Right> :tabnext<CR>

" Plugin configuration
"

" NERDTree
" Give a shortcut key to NERD Tree
map <F2> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" GUI Settings
"
" Remove scroolbar
set guioptions-=L
set guioptions-=r

" Javascript
"
let g:used_javascript_libs = 'jquery,angularjs'

" Ultisnips
" 
"
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ["snips"]

function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

" JsBeautify
"
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

" HTML, Django, Jinja, Dram {{{
augroup ft_html
  au!

  au BufNewFile,BufRead *.html setlocal filetype=htmldjango
  au BufNewFile,BufRead *.dram setlocal filetype=htmldjango

  au FileType html,htmldjango setlocal foldmethod=manual

  " Use <localleader>f to fold the current tag.
  au FileType html,htmldjango nnoremap <buffer> <localleader>f Vatzf

  " Use <localleader>t to fold the current templatetag.
  au FileType html,htmldjango nmap <buffer> <localleader>t viikojozf

  " Indent tag
  au FileType html,htmldjango nnoremap <buffer> <localleader>= Vat=

  " Django tags
  au FileType htmldjango inoremap <buffer> <c-t> {%<space><space>%}<left><left><left>

  " Django variables
  au FileType htmldjango inoremap <buffer> <c-b> {{<space><space>}}<left><left><left>

  set ballooneval
  autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr() 
augroup END

" Indent Guides
"
"let g:indent_guides_guide_size = 1 
let g:indent_guides_start_level = 2
let g:indent_guides_color_change_percent = 3 
