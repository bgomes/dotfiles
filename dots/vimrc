"*****************************************************************************
" NeoBundle core
"*****************************************************************************

if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')

"
" Install Neobundle if donst exists
"
if !filereadable(neobundle_readme)
  echo "Installing NeoBundle..."
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim/
  let g:not_finsh_neobundle = "yes"
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

"*****************************************************************************
" Install plugins if not already installed
"*****************************************************************************
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'gosukiwi/vim-atom-dark'
NeoBundle 'vim-scripts/tcd.vim'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'garbas/vim-snipmate'
NeoBundle 'honza/vim-snippets'
NeoBundle 'ctrlpvim/ctrlp.vim'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"*****************************************************************************
" NeoBundle configuration
"*****************************************************************************
let g:ctrlp_show_hidden = 1 " Show hidden files


"*****************************************************************************
" Personal configuration
"*****************************************************************************
"
" Syntax highlight
"
syntax on
set synmaxcol=120

" Visual
"
set ruler
set number
set relativenumber 

set tabstop=4
set shiftwidth=4
set expandtab

" Color Scheme
"
set t_Co=256
color atom-dark-256


" Show hidden chars
"
set list
set listchars=eol:¬,tab:>~,trail:·,extends:>,precedes:<

" Copy to system clipboard
"
set clipboard=unnamed

" Keep selection after indent
vnoremap < <gv
vnoremap > >gv

" This is how to be a ninja in VIM
" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Disable line wrap
set nowrap


" Map keys to easy move between windows using CTRL+<DIRECTIONS>
"
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Lightline
"
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }
" Map arrow keys to move between tabs
"
noremap <Left> :tabprev<CR>
noremap <Right> :tabnext<CR>

" Plugin configuration
"

" AutoPairs
if !exists('g:AutoPairs')
    let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`', '<':'>'}
end

" Ctrlp
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__,.DS_Store
let g:ctrlp_custom_ignore='\v[\/]\.(git|hg|svn|tox)$'

" GUI Settings
"
" Remove scroolbar
set guioptions-=L
set guioptions-=r

" Languages customizations
"
"
" Python
"
" This function will color only the char in the position 81 when you cross the
" limit in pep8 :D
augroup collumnLimit
  autocmd!
  autocmd BufEnter,WinEnter,FileType python 
        \ highlight CollumnLimit ctermbg=DarkGrey guibg=DarkGrey
  let collumnLimit = 81
  let pattern =
        \ '\%<' . (collumnLimit+1) . 'v.\%>' . collumnLimit . 'v'
  autocmd BufEnter,WinEnter,FileType python 
        \ let w:m1=matchadd('CollumnLimit', pattern, -1)
augroup END

